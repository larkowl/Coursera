#pragma once

#include <cstdlib>
#include <stdexcept>
#include <algorithm>

template <typename T>
class SimpleVector {
public:
    SimpleVector();
    explicit SimpleVector(size_t size);
    SimpleVector(const SimpleVector& other);
    ~SimpleVector();

    T& operator[](size_t index);
    const T& operator[](size_t index) const;
    SimpleVector& operator=(const SimpleVector& other);

    T* begin();
    T* end();
    const T* begin() const;
    const T* end() const;

    size_t Size() const;
    size_t Capacity() const;
    void PushBack(const T& value);

private:
    size_t capacity;
    size_t pointer_;
    T* data_;

    void Resize();
};

template <typename T>
SimpleVector<T>::SimpleVector() : capacity(0), pointer_(0), data_(nullptr) {}

template <typename T>
SimpleVector<T>::SimpleVector(size_t size) : capacity(size), pointer_(size), data_(new T[size]) {}

template <typename T>
SimpleVector<T>::SimpleVector(const SimpleVector& other) : data_(new T[other.Capacity()]),
    capacity(other.Capacity()), pointer_(other.pointer_) {
        
        std::copy(other.begin(), other.end(), begin());
    }

template <typename T>
SimpleVector<T>::~SimpleVector() {
    if (data_) {
        delete[] data_;
    }
}

template <typename T>
size_t SimpleVector<T>::Size() const {
    return pointer_;
}

template <typename T>
size_t SimpleVector<T>::Capacity() const {
    return capacity;
}

template <typename T>
T* SimpleVector<T>::begin() {
    return data_;
}

template <typename T>
T* SimpleVector<T>::end() {
    return data_ + pointer_;
}

template <typename T>
const T* SimpleVector<T>::begin() const {
    return data_;
}

template <typename T>
const T* SimpleVector<T>::end() const {
    return data_ + pointer_;
}

template <typename T>
SimpleVector<T>& SimpleVector<T>::operator=(const SimpleVector &other) {
    if (Capacity() <= other.Size()) {
        delete[] data_;
        capacity = other.Capacity();
        data_ = new T[capacity];
    }

    std::copy(other.begin(), other.end(), begin());
    pointer_ = other.Size();

    return *this;
}

template <typename T>
T& SimpleVector<T>::operator[](size_t index) {
    if (index < 0 || index >= pointer_) {
        throw std::invalid_argument("");
    }

    return *(data_ + index);
}

template <typename T>
const T& SimpleVector<T>::operator[](size_t index) const {
    if (index < 0 || index >= pointer_) {
        throw std::invalid_argument("");
    }

    return *(data_ + index);
}

template <typename T>
void SimpleVector<T>::PushBack(const T &value) {
    if (pointer_ >= capacity) {
        Resize();
    }

    data_[pointer_] = value;
    pointer_ = pointer_ + 1;
}

template <typename T>
void SimpleVector<T>::Resize() {
    if (capacity == 0) {
        capacity = 1;
        data_ = new T[capacity];
    } else {
        T* temporary = new T[capacity * 2];
        std::copy(begin(), end(), temporary);
        delete[] data_;
        data_ = temporary;
        capacity = capacity * 2;
    }
}
