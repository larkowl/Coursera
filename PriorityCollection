#include "test_runner.h"

#include <algorithm>
#include <iostream>
#include <iterator>
#include <memory>
#include <set>
#include <utility>
#include <vector>
#include <map>

struct node {
    int id;
    int priority;
};

bool operator<(const node& lhs, const node& rhs) {
    if (lhs.priority == rhs.priority) {
        return lhs.id > rhs.id;
    }
    return lhs.priority > rhs.priority;
}

template <typename T>
class PriorityCollection {
public:
    using Id = int;
    using info = std::pair<std::set<node>::const_iterator, T>;


    Id Add(T object) {
        Id id = count;
        auto [element_iterator, added] = elements.insert({id, 0});
        ids[count++] = {element_iterator, std::move(object)};

        return id;
    };

    template <typename ObjInputIt, typename IdOutputIt>
    void Add(ObjInputIt range_begin, ObjInputIt range_end,
             IdOutputIt ids_begin) {
        for (auto it = range_begin; it != range_end; ++it, ++ids_begin) {
            *ids_begin = Add(std::move(*it));
        }
    };


    bool IsValid(Id id) const {
        return ids.count(id) != 0;
    };

    const T& Get(Id id) const {
        return (ids.at(id)).second;
    };

    void Promote(Id id) {
        int priority = (ids[id].first)->priority + 1;
        elements.erase(ids[id].first);
        auto [element_iterator, added] = elements.insert({id, priority});
        ids[id].first = element_iterator;
    };

    std::pair<const T&, int> GetMax() const {
        auto [id, priority] = *elements.begin();
        return {(ids.at(id)).second, priority};
    };

    std::pair<T, int> PopMax() {
        auto [id, priority] = *elements.begin();
        elements.erase(elements.begin());
        std::pair<T, int> max = {std::move(ids[id].second), priority};
        ids.erase(id);

        return max;
    };

private:
    const unsigned long MAXN = static_cast<const unsigned long>(1e6 + 10);
    std::set<node> elements;
    std::map<int, info> ids;
    int count = 0;
};


class StringNonCopyable : public std::string {
public:
    using std::string::string;  // РџРѕР·РІРѕР»СЏРµС‚ РёСЃРїРѕР»СЊР·РѕРІР°С‚СЊ РєРѕРЅСЃС‚СЂСѓРєС‚РѕСЂС‹ СЃС‚СЂРѕРєРё
    StringNonCopyable(const StringNonCopyable&) = delete;
    StringNonCopyable(StringNonCopyable&&) = default;
    StringNonCopyable& operator=(const StringNonCopyable&) = delete;
    StringNonCopyable& operator=(StringNonCopyable&&) = default;
};

void TestNoCopy() {
    PriorityCollection<StringNonCopyable> strings;
    const auto white_id = strings.Add("white");
    const auto yellow_id = strings.Add("yellow");
    const auto red_id = strings.Add("red");

    strings.Promote(yellow_id);
    for (int i = 0; i < 2; ++i) {
        strings.Promote(red_id);
    }
    strings.Get(1);
    strings.Promote(yellow_id);
    {
        const auto item = strings.PopMax();
        ASSERT_EQUAL(item.first, "red");
        ASSERT_EQUAL(item.second, 2);
    }
    {
        const auto item = strings.PopMax();
        ASSERT_EQUAL(item.first, "yellow");
        ASSERT_EQUAL(item.second, 2);
    }
    {
        const auto item = strings.PopMax();
        ASSERT_EQUAL(item.first, "white");
        ASSERT_EQUAL(item.second, 0);
    }
}

int main() {
    TestRunner tr;
    RUN_TEST(tr, TestNoCopy);
    return 0;
}
