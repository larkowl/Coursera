#include <iostream>
#include <string>
#include <sstream>
#include <map>
#include <set>
#include <vector>

template <class T>
std::ostream& operator << (std::ostream& os, const std::vector<T>& s) {
    os << "{";
    bool first = true;
    for (const auto& x : s) {
        if (!first) {
            os << ", ";
        }
        first = false;
        os << x;
    }
    return os << "}";
}

template <class T>
std::ostream& operator << (std::ostream& os, const std::set<T>& s) {
    os << "{";
    bool first = true;
    for (const auto& x : s) {
        if (!first) {
            os << ", ";
        }
        first = false;
        os << x;
    }
    return os << "}";
}

template <class K, class V>
std::ostream& operator << (std::ostream& os, const std::map<K, V>& m) {
    os << "{";
    bool first = true;
    for (const auto& kv : m) {
        if (!first) {
            os << ", ";
        }
        first = false;
        os << kv.first << ": " << kv.second;
    }
    return os << "}";
}

class TestRunner {
    int fail_count = 0;
public:
    template <typename TestFunction>
    void RunTest(TestFunction function, const std::string& test) {
        try {
            function();
            std::cerr << test << " OK" << std::endl;
        }
        catch (std::runtime_error& ex) {
            ++fail_count;
            std::cerr << test << " fail: " << ex.what() << std::endl;
        }
        catch (std::exception& ex) {
            ++fail_count;
            std::cerr << "Unknown exception caught" << std::endl;
        }
    }
    ~TestRunner() {
        if (fail_count > 0) {
            std::cerr << fail_count << " unit tests failed. Terminate" << std::endl;
            exit(1);
        }
    }
};


template <typename T, typename U>
void AssertEqual(const T& t, const U& u, const std::string& hint) {
    if (t != u) {
        std::stringstream ss;
        ss << "Assertion failed: " << t << "!=" << u << std::endl;
        if (!hint.empty()) {
            ss << "hint: " << hint << std::endl;
        }
        throw std::runtime_error(ss.str());
    }
}

void Assert(bool b, const std::string& hint) {
    AssertEqual(b, true, hint);
}

class Rational {
public:

    Rational();
    Rational(int numerator, int denominator) {
    }

    int Numerator() const {
    }

    int Denominator() const {
    }
};

void TestConstructor() {
    Rational rational;
    AssertEqual(rational.Numerator(), 0, "");
    AssertEqual(rational.Denominator(), 1, "");
}

void TestConstructorWithParameters() {
    Rational rational(1, 4);
    AssertEqual(rational.Numerator(), 1, "1");
    AssertEqual(rational.Denominator(), 4, "1");
    Rational rational1(2, 8);
    AssertEqual(rational1.Numerator(), 1, "1");
    AssertEqual(rational1.Denominator(), 4, "1");
}

void TestNegativeValue() {
    Rational rational(-1, 4);
    AssertEqual(rational.Numerator(), -1, "1");
    AssertEqual(rational.Denominator(), 4, "1");
    Rational rational1(1, -4);
    AssertEqual(rational1.Numerator(), -1, "1");
    AssertEqual(rational1.Denominator(), 4, "1");
    Rational rational2(-2, 8);
    AssertEqual(rational2.Numerator(), -1, "1");
    AssertEqual(rational2.Denominator(), 4, "1");
    Rational rational3(2, -8);
    AssertEqual(rational3.Numerator(), -1, "1");
    AssertEqual(rational3.Denominator(), 4, "1");
}

void TestPositiveValue() {
    Rational rational(1, 4);
    AssertEqual(rational.Numerator(), 1, "8");
    AssertEqual(rational.Denominator(), 4, "8");
    Rational rational1(-1, -4);
    AssertEqual(rational1.Numerator(), 1, "9");
    AssertEqual(rational1.Denominator(), 4, "9");
}

void TestNullDenominator() {
    Rational rational(0, 4);
    AssertEqual(rational.Numerator(), 0, "8");
    AssertEqual(rational.Denominator(), 1, "8");
    Rational rational1(0, -4);
    AssertEqual(rational1.Numerator(), 0, "8");
    AssertEqual(rational1.Denominator(), 1, "8");
}

int main() {
    TestRunner tr;
    tr.RunTest(TestConstructor, "TestConstructor");
    tr.RunTest(TestConstructorWithParameters, "TestConstructorWithParameters");
    tr.RunTest(TestNegativeValue, "TestNegativeValue");
    tr.RunTest(TestPositiveValue, "TestPositiveValue");
    tr.RunTest(TestNullDenominator, "TestNullDenominator");
    return 0;
}
